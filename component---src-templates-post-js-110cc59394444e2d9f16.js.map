{"version":3,"file":"component---src-templates-post-js-110cc59394444e2d9f16.js","mappings":"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","sources":["webpack://czhuang-blog-develop/./node_modules/style-to-js/node_modules/inline-style-parser/index.js","webpack://czhuang-blog-develop/./node_modules/extend/index.js","webpack://czhuang-blog-develop/./node_modules/style-to-js/node_modules/style-to-object/cjs/index.js","webpack://czhuang-blog-develop/./node_modules/style-to-js/cjs/index.js","webpack://czhuang-blog-develop/./node_modules/devlop/lib/default.js","webpack://czhuang-blog-develop/./node_modules/hast-util-to-jsx-runtime/node_modules/estree-util-is-identifier-name/lib/index.js","webpack://czhuang-blog-develop/./node_modules/hast-util-to-jsx-runtime/node_modules/hast-util-whitespace/lib/index.js","webpack://czhuang-blog-develop/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/schema.js","webpack://czhuang-blog-develop/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/merge.js","webpack://czhuang-blog-develop/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/normalize.js","webpack://czhuang-blog-develop/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/info.js","webpack://czhuang-blog-develop/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/types.js","webpack://czhuang-blog-develop/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/defined-info.js","webpack://czhuang-blog-develop/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/create.js","webpack://czhuang-blog-develop/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/aria.js","webpack://czhuang-blog-develop/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://czhuang-blog-develop/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://czhuang-blog-develop/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/html.js","webpack://czhuang-blog-develop/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/svg.js","webpack://czhuang-blog-develop/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/xlink.js","webpack://czhuang-blog-develop/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/xmlns.js","webpack://czhuang-blog-develop/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/xml.js","webpack://czhuang-blog-develop/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/index.js","webpack://czhuang-blog-develop/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/find.js","webpack://czhuang-blog-develop/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/hast-to-react.js","webpack://czhuang-blog-develop/./node_modules/hast-util-to-jsx-runtime/node_modules/unist-util-position/lib/index.js","webpack://czhuang-blog-develop/./node_modules/hast-util-to-jsx-runtime/node_modules/unist-util-stringify-position/lib/index.js","webpack://czhuang-blog-develop/./node_modules/hast-util-to-jsx-runtime/node_modules/vfile-message/lib/index.js","webpack://czhuang-blog-develop/./node_modules/hast-util-to-jsx-runtime/lib/index.js","webpack://czhuang-blog-develop/./node_modules/comma-separated-tokens/index.js","webpack://czhuang-blog-develop/./node_modules/space-separated-tokens/index.js","webpack://czhuang-blog-develop/./node_modules/html-url-attributes/lib/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-string/lib/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-util-chunked/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-util-subtokenize/lib/splice-buffer.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-util-subtokenize/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-util-combine-extensions/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-util-character/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-factory-space/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark/lib/initialize/content.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark/lib/initialize/document.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/content.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark/lib/initialize/flow.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark/lib/initialize/text.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/list.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-factory-destination/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-factory-label/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-factory-title/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-factory-whitespace/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-util-normalize-identifier/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/definition.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-util-html-tag-name/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://czhuang-blog-develop/./node_modules/decode-named-character-reference/index.dom.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-util-resolve-all/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/label-end.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-util-classify-character/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/attention.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/autolink.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/html-text.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-core-commonmark/lib/code-text.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark/lib/constructs.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark/lib/create-tokenizer.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark/lib/parse.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark/lib/preprocess.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-util-decode-string/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/unist-util-stringify-position/lib/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-from-markdown/lib/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark/lib/postprocess.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/remark-parse/lib/index.js","webpack://czhuang-blog-develop/./node_modules/@ungap/structured-clone/esm/types.js","webpack://czhuang-blog-develop/./node_modules/@ungap/structured-clone/esm/deserialize.js","webpack://czhuang-blog-develop/./node_modules/@ungap/structured-clone/esm/serialize.js","webpack://czhuang-blog-develop/./node_modules/@ungap/structured-clone/esm/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/micromark-util-sanitize-uri/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/footer.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/unist-util-is/lib/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/unist-util-visit-parents/lib/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/unist-util-visit/lib/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/unist-util-position/lib/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/revert.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack://czhuang-blog-develop/./node_modules/trim-lines/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/table-row.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/state.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/mdast-util-to-hast/lib/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/remark-rehype/lib/index.js","webpack://czhuang-blog-develop/./node_modules/bail/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/is-plain-obj/index.js","webpack://czhuang-blog-develop/./node_modules/trough/lib/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/vfile-message/lib/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/vfile/lib/minpath.browser.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/vfile/lib/minproc.browser.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/vfile/lib/minurl.shared.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/vfile/lib/minurl.browser.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/vfile/lib/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/unified/lib/callable-instance.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/node_modules/unified/lib/index.js","webpack://czhuang-blog-develop/./node_modules/react-markdown/lib/index.js","webpack://czhuang-blog-develop/./node_modules/ccount/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-autolink-literal/node_modules/micromark-util-character/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-find-and-replace/node_modules/unist-util-is/lib/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-find-and-replace/node_modules/unist-util-visit-parents/lib/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-find-and-replace/lib/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-autolink-literal/lib/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-footnote/node_modules/micromark-util-normalize-identifier/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-footnote/lib/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-strikethrough/lib/index.js","webpack://czhuang-blog-develop/./node_modules/markdown-table/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/break.js","webpack://czhuang-blog-develop/./node_modules/longest-streak/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/code.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-quote.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/micromark-util-character/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/micromark-util-classify-character/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/encode-info.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/unist-util-is/lib/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/unist-util-visit-parents/lib/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-string/lib/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/unist-util-visit/lib/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/html.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/image.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/link.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-rule.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-phrasing/lib/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/strong.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-strong.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-fence.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/definition.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/heading.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/list.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/list-item.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/root.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/text.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-table/lib/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/break.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/code.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-quote.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/micromark-util-character/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/micromark-util-classify-character/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/encode-info.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/unist-util-is/lib/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/unist-util-visit-parents/lib/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-string/lib/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/unist-util-visit/lib/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/html.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/image.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/link.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-rule.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-phrasing/lib/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/strong.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-strong.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-fence.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/definition.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/heading.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/list.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/list-item.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/root.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/text.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm-task-list-item/lib/index.js","webpack://czhuang-blog-develop/./node_modules/micromark-extension-gfm/node_modules/micromark-util-chunked/index.js","webpack://czhuang-blog-develop/./node_modules/micromark-extension-gfm/node_modules/micromark-util-combine-extensions/index.js","webpack://czhuang-blog-develop/./node_modules/micromark-extension-gfm-autolink-literal/node_modules/micromark-util-character/index.js","webpack://czhuang-blog-develop/./node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","webpack://czhuang-blog-develop/./node_modules/micromark-extension-gfm-footnote/node_modules/micromark-util-character/index.js","webpack://czhuang-blog-develop/./node_modules/micromark-extension-gfm-footnote/node_modules/micromark-factory-space/index.js","webpack://czhuang-blog-develop/./node_modules/micromark-extension-gfm-footnote/node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://czhuang-blog-develop/./node_modules/micromark-extension-gfm-footnote/node_modules/micromark-util-normalize-identifier/index.js","webpack://czhuang-blog-develop/./node_modules/micromark-extension-gfm-footnote/lib/syntax.js","webpack://czhuang-blog-develop/./node_modules/micromark-extension-gfm-strikethrough/node_modules/micromark-util-chunked/index.js","webpack://czhuang-blog-develop/./node_modules/micromark-extension-gfm-strikethrough/node_modules/micromark-util-character/index.js","webpack://czhuang-blog-develop/./node_modules/micromark-extension-gfm-strikethrough/node_modules/micromark-util-classify-character/index.js","webpack://czhuang-blog-develop/./node_modules/micromark-extension-gfm-strikethrough/node_modules/micromark-util-resolve-all/index.js","webpack://czhuang-blog-develop/./node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","webpack://czhuang-blog-develop/./node_modules/micromark-extension-gfm-table/node_modules/micromark-util-character/index.js","webpack://czhuang-blog-develop/./node_modules/micromark-extension-gfm-table/node_modules/micromark-factory-space/index.js","webpack://czhuang-blog-develop/./node_modules/micromark-extension-gfm-table/lib/edit-map.js","webpack://czhuang-blog-develop/./node_modules/micromark-extension-gfm-table/lib/infer.js","webpack://czhuang-blog-develop/./node_modules/micromark-extension-gfm-table/lib/syntax.js","webpack://czhuang-blog-develop/./node_modules/micromark-extension-gfm-task-list-item/node_modules/micromark-util-character/index.js","webpack://czhuang-blog-develop/./node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","webpack://czhuang-blog-develop/./node_modules/micromark-extension-gfm-task-list-item/node_modules/micromark-factory-space/index.js","webpack://czhuang-blog-develop/./node_modules/micromark-extension-gfm/index.js","webpack://czhuang-blog-develop/./node_modules/remark-gfm/lib/index.js","webpack://czhuang-blog-develop/./node_modules/mdast-util-gfm/lib/index.js","webpack://czhuang-blog-develop/./src/templates/post.js","webpack://czhuang-blog-develop/./node_modules/style-to-js/cjs/utilities.js"],"sourcesContent":["// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = StyleToObject;\nvar inline_style_parser_1 = __importDefault(require(\"inline-style-parser\"));\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nfunction StyleToObject(style, iterator) {\n    var styleObject = null;\n    if (!style || typeof style !== 'string') {\n        return styleObject;\n    }\n    var declarations = (0, inline_style_parser_1.default)(style);\n    var hasIterator = typeof iterator === 'function';\n    declarations.forEach(function (declaration) {\n        if (declaration.type !== 'declaration') {\n            return;\n        }\n        var property = declaration.property, value = declaration.value;\n        if (hasIterator) {\n            iterator(property, value, declaration);\n        }\n        else if (value) {\n            styleObject = styleObject || {};\n            styleObject[property] = value;\n        }\n    });\n    return styleObject;\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar style_to_object_1 = __importDefault(require(\"style-to-object\"));\nvar utilities_1 = require(\"./utilities\");\n/**\n * Parses CSS inline style to JavaScript object (camelCased).\n */\nfunction StyleToJS(style, options) {\n    var output = {};\n    if (!style || typeof style !== 'string') {\n        return output;\n    }\n    (0, style_to_object_1.default)(style, function (property, value) {\n        // skip CSS comment\n        if (property && value) {\n            output[(0, utilities_1.camelCase)(property, options)] = value;\n        }\n    });\n    return output;\n}\nStyleToJS.default = StyleToJS;\nmodule.exports = StyleToJS;\n//# sourceMappingURL=index.js.map","export function deprecate(fn) {\n  return fn\n}\n\nexport function equal() {}\n\nexport function ok() {}\n\nexport function unreachable() {}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @import {Schema as SchemaType, Space} from 'property-information'\n */\n\n/** @type {SchemaType} */\nexport class Schema {\n  /**\n   * @param {SchemaType['property']} property\n   *   Property.\n   * @param {SchemaType['normal']} normal\n   *   Normal.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Schema.\n   */\n  constructor(property, normal, space) {\n    this.normal = normal\n    this.property = property\n\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\nSchema.prototype.normal = {}\nSchema.prototype.property = {}\nSchema.prototype.space = undefined\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {ReadonlyArray<Schema>} definitions\n *   Definitions.\n * @param {Space | undefined} [space]\n *   Space.\n * @returns {Schema}\n *   Schema.\n */\nexport function merge(definitions, space) {\n  /** @type {Record<string, Info>} */\n  const property = {}\n  /** @type {Record<string, string>} */\n  const normal = {}\n\n  for (const definition of definitions) {\n    Object.assign(property, definition.property)\n    Object.assign(normal, definition.normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * Get the cleaned case insensitive form of an attribute or property.\n *\n * @param {string} value\n *   An attribute-like or property-like name.\n * @returns {string}\n *   Value that can be used to look up the properly cased property on a\n *   `Schema`.\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","/**\n * @import {Info as InfoType} from 'property-information'\n */\n\n/** @type {InfoType} */\nexport class Info {\n  /**\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute) {\n    this.attribute = attribute\n    this.property = property\n  }\n}\n\nInfo.prototype.attribute = ''\nInfo.prototype.booleanish = false\nInfo.prototype.boolean = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.defined = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.number = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.property = ''\nInfo.prototype.spaceSeparated = false\nInfo.prototype.space = undefined\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","/**\n * @import {Space} from 'property-information'\n */\n\nimport {Info} from './info.js'\nimport * as types from './types.js'\n\nconst checks = /** @type {ReadonlyArray<keyof typeof types>} */ (\n  Object.keys(types)\n)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @param {number | null | undefined} [mask]\n   *   Mask.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @template {keyof DefinedInfo} Key\n *   Key type.\n * @param {DefinedInfo} values\n *   Info.\n * @param {Key} key\n *   Key.\n * @param {DefinedInfo[Key]} value\n *   Value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction mark(values, key, value) {\n  if (value) {\n    values[key] = value\n  }\n}\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\n/**\n * @typedef Definition\n *   Definition of a schema.\n * @property {Record<string, string> | undefined} [attributes]\n *   Normalzed names to special attribute case.\n * @property {ReadonlyArray<string> | undefined} [mustUseProperty]\n *   Normalized names that must be set as properties.\n * @property {Record<string, number | null>} properties\n *   Property names to their types.\n * @property {Space | undefined} [space]\n *   Space.\n * @property {Transform} transform\n *   Transform a property name.\n */\n\n/**\n * @callback Transform\n *   Transform.\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Attribute.\n */\n\nimport {normalize} from '../normalize.js'\nimport {DefinedInfo} from './defined-info.js'\nimport {Schema} from './schema.js'\n\n/**\n * @param {Definition} definition\n *   Definition.\n * @returns {Schema}\n *   Schema.\n */\nexport function create(definition) {\n  /** @type {Record<string, Info>} */\n  const properties = {}\n  /** @type {Record<string, string>} */\n  const normals = {}\n\n  for (const [property, value] of Object.entries(definition.properties)) {\n    const info = new DefinedInfo(\n      property,\n      definition.transform(definition.attributes || {}, property),\n      value,\n      definition.space\n    )\n\n    if (\n      definition.mustUseProperty &&\n      definition.mustUseProperty.includes(property)\n    ) {\n      info.mustUseProperty = true\n    }\n\n    properties[property] = info\n\n    normals[normalize(property)] = property\n    normals[normalize(info.attribute)] = property\n  }\n\n  return new Schema(properties, normals, definition.space)\n}\n","import {create} from './util/create.js'\nimport {booleanish, number, spaceSeparated} from './util/types.js'\n\nexport const aria = create({\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  },\n  transform(_, property) {\n    return property === 'role'\n      ? property\n      : 'aria-' + property.slice(4).toLowerCase()\n  }\n})\n","/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} attribute\n *   Attribute.\n * @returns {string}\n *   Transformed attribute.\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Transformed property.\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  booleanish,\n  boolean,\n  commaSeparated,\n  number,\n  overloadedBoolean,\n  spaceSeparated\n} from './util/types.js'\n\nexport const html = create({\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: overloadedBoolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  },\n  space: 'html',\n  transform: caseInsensitiveTransform\n})\n","import {caseSensitiveTransform} from './util/case-sensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  boolean,\n  commaOrSpaceSeparated,\n  commaSeparated,\n  number,\n  spaceSeparated\n} from './util/types.js'\n\nexport const svg = create({\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  },\n  space: 'svg',\n  transform: caseSensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  },\n  space: 'xlink',\n  transform(_, property) {\n    return 'xlink:' + property.slice(5).toLowerCase()\n  }\n})\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  properties: {xmlnsXLink: null, xmlns: null},\n  space: 'xmlns',\n  transform: caseInsensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  properties: {xmlBase: null, xmlLang: null, xmlSpace: null},\n  space: 'xml',\n  transform(_, property) {\n    return 'xml:' + property.slice(3).toLowerCase()\n  }\n})\n","// Note: types exposed from `index.d.ts`.\nimport {merge} from './lib/util/merge.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\nimport {xlink} from './lib/xlink.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {xml} from './lib/xml.js'\n\nexport {hastToReact} from './lib/hast-to-react.js'\n\nexport const html = merge([aria, htmlBase, xlink, xmlns, xml], 'html')\n\nexport {find} from './lib/find.js'\nexport {normalize} from './lib/normalize.js'\n\nexport const svg = merge([aria, svgBase, xlink, xmlns, xml], 'svg')\n","/**\n * @import {Schema} from 'property-information'\n */\n\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\nimport {normalize} from './normalize.js'\n\nconst cap = /[A-Z]/g\nconst dash = /-[a-z]/g\nconst valid = /^data[-\\w.:]+$/i\n\n/**\n * Look up info on a property.\n *\n * In most cases the given `schema` contains info on the property.\n * All standard,\n * most legacy,\n * and some non-standard properties are supported.\n * For these cases,\n * the returned `Info` has hints about the value of the property.\n *\n * `name` can also be a valid data attribute or property,\n * in which case an `Info` object with the correctly cased `attribute` and\n * `property` is returned.\n *\n * `name` can be an unknown attribute,\n * in which case an `Info` object with `attribute` and `property` set to the\n * given name is returned.\n * It is not recommended to provide unsupported legacy or recently specced\n * properties.\n *\n *\n * @param {Schema} schema\n *   Schema;\n *   either the `html` or `svg` export.\n * @param {string} value\n *   An attribute-like or property-like name;\n *   it will be passed through `normalize` to hopefully find the correct info.\n * @returns {Info}\n *   Info.\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let property = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      property = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(property, value)\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Kebab.\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Camel.\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * Special cases for React (`Record<string, string>`).\n *\n * `hast` is close to `React` but differs in a couple of cases.\n * To get a React property from a hast property,\n * check if it is in `hastToReact`.\n * If it is, use the corresponding value;\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file = ''\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual = undefined\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected = undefined\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note = undefined\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url = undefined\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, JsxElement, State, Style} from './types.js'\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToJs from 'style-to-js'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JsxElement}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  try {\n    return styleToJs(value, {reactCompat: true})\n  } catch (error) {\n    if (state.ignoreInvalidStyle) {\n      return {}\n    }\n\n    const cause = /** @type {Error} */ (error)\n    const message = new VFileMessage('Cannot parse `style` attribute', {\n      ancestors: state.ancestors,\n      cause,\n      ruleId: 'style',\n      source: 'hast-util-to-jsx-runtime'\n    })\n    message.file = state.filePath || undefined\n    message.url = docs + '#cannot-parse-style-attribute'\n\n    throw message\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {string | number} */ (result.value)\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push(...newElements)` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @import {Chunk, Event, Token} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else if (otherEvent[1].type === \"linePrefix\" || otherEvent[1].type === \"listItemIndent\") {\n          // Move past.\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = {\n          ...events.get(lineIndex)[1].start\n        };\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n *   Events.\n * @param {number} eventIndex\n *   Index.\n * @returns {Record<string, number>}\n *   Gaps.\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  let tokenizer = token._tokenizer;\n  if (!tokenizer) {\n    tokenizer = context.parser[token.contentType](token.start);\n    if (token._contentTypeTextTrailing) {\n      tokenizer._contentTypeTextTrailing = true;\n    }\n  }\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, contentStart, \"linePrefix\");\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter(\"paragraph\");\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(\"chunkText\", {\n      contentType: \"text\",\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit(\"chunkText\");\n      effects.exit(\"paragraph\");\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(\"chunkText\");\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter(\"chunkFlow\", {\n      _tokenizer: childFlow,\n      contentType: \"flow\",\n      previous: childToken\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit(\"chunkFlow\"), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit(\"chunkFlow\"));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function writeToChild(token, endOfFile) {\n    const stream = self.sliceStream(token);\n    if (endOfFile) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), \"linePrefix\", this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), \"linePrefix\")));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEndingBlank\");\n    effects.consume(code);\n    effects.exit(\"lineEndingBlank\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","/**\n * @import {\n *   Code,\n *   InitialConstruct,\n *   Initializer,\n *   Resolver,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n\n/**\n * @param {'string' | 'text'} field\n *   Field.\n * @returns {InitialConstruct}\n *   Construct.\n */\nfunction initializeFactory(field) {\n  return {\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined),\n    tokenize: initializeText\n  };\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter(\"data\");\n      effects.consume(code);\n      return data;\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(\"data\");\n        return text(code);\n      }\n\n      // Data.\n      effects.consume(code);\n      return data;\n    }\n\n    /**\n     * @param {Code} code\n     *   Code.\n     * @returns {boolean}\n     *   Whether the code is a break.\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      const list = constructs[code];\n      let index = -1;\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n *   Resolver.\n * @returns {Resolver}\n *   Resolver.\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number | undefined} */\n    let enter;\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === \"data\") {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== \"data\") {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === \"lineEnding\") && events[eventIndex - 1][1].type === \"data\") {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean | undefined} */\n      let tabs;\n      while (index--) {\n        const chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n\n      // Allow final trailing whitespace.\n      if (context._contentTypeTextTrailing && eventIndex === events.length) {\n        size = 0;\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < 2 ? \"lineSuffix\" : \"hardBreakTrailing\",\n          start: {\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,\n            _index: data.start._index + index,\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size\n          },\n          end: {\n            ...data.end\n          }\n        };\n        data.end = {\n          ...token.start\n        };\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  partial: true,\n  tokenize: tokenizeIndent\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return raw(code);\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return enclosed(code);\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}","/**\n * @import {\n *   Effects,\n *   State,\n *   TokenizeContext,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once we’ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesn’t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return atBreak;\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Effects,\n *   State,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return factorySpace(effects, atBreak, \"linePrefix\");\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return inside(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}","/**\n * @import {Effects, State} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? \"linePrefix\" : \"lineSuffix\")(code);\n    }\n    return ok(code);\n  }\n}","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  partial: true,\n  tokenize: tokenizeTitleBefore\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  partial: true,\n  tokenize: tokenizeFurtherStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: {\n      ...events[content][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = {\n      ...events[definition][1].end\n    };\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  partial: true,\n  tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      // Always the case.\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    partial: true,\n    tokenize: tokenizeCloseStart\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/// <reference lib=\"dom\" />\n\n/* global document */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string | false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const character = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  if (\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\n    value !== 'semi'\n  ) {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return character === characterReference ? false : character\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  /** @type {Array<Event>} */\n  const newEvents = [];\n  while (++index < events.length) {\n    const token = events[index][1];\n    newEvents.push(events[index]);\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      const offset = token.type === \"labelImage\" ? 4 : 2;\n      token.type = \"data\";\n      index += offset;\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents);\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n  const label = {\n    type: \"label\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[close][1].end\n    }\n  };\n  const text = {\n    type: \"labelText\",\n    start: {\n      ...events[open + offset + 2][1].end\n    },\n    end: {\n      ...events[close - 2][1].start\n    }\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = {\n            ...events[open][1].end\n          };\n          const end = {\n            ...events[index][1].start\n          };\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: {\n              ...events[open][1].end\n            }\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: {\n              ...events[index][1].start\n            },\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: {\n              ...events[open][1].end\n            },\n            end: {\n              ...events[index][1].start\n            }\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: {\n              ...openingSequence.start\n            },\n            end: {\n              ...closingSequence.end\n            }\n          };\n          events[open][1].end = {\n            ...openingSequence.start\n          };\n          events[index][1].start = {\n            ...closingSequence.end\n          };\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @import {Extension} from 'micromark-util-types'\n */\n\nimport { attention, autolink, blockQuote, characterEscape, characterReference, codeFenced, codeIndented, codeText, definition, hardBreakEscape, headingAtx, htmlFlow, htmlText, labelEnd, labelStartImage, labelStartLink, lineEnding, list, setextUnderline, thematicBreak } from 'micromark-core-commonmark';\nimport { resolver as resolveText } from './initialize/text.js';\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n};\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n};\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n};\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n};\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n};\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n};\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n};\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n};\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n};","/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = {\n    _bufferIndex: -1,\n    _index: 0,\n    line: from && from.line || 1,\n    column: from && from.column || 1,\n    offset: from && from.offset || 0\n  };\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    consume,\n    enter,\n    exit,\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    code: null,\n    containerState: {},\n    defineSkip,\n    events: [],\n    now,\n    parser,\n    previous: null,\n    sliceSerialize,\n    sliceStream,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    } = point;\n    return {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      if (point._bufferIndex ===\n      // Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      /** @type {string} */\n      chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {ReadonlyArray<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) ? /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // Looks like a construct.\n      handleListOfConstructs([(/** @type {Construct} */constructs)]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const left = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(left) ? left : left ? [left] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      from: startEventsIndex,\n      restore\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n        /* c8 ignore next 4 -- used to be used, no longer */\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = \"\\r\";\n          break;\n        }\n      case -4:\n        {\n          value = \"\\n\";\n          break;\n        }\n      case -3:\n        {\n          value = \"\\r\" + \"\\n\";\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? \" \" : \"\\t\";\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = \" \";\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { string, text } from './initialize/text.js';\nimport * as defaultConstructs from './constructs.js';\nimport { createTokenizer } from './create-tokenizer.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */\nexport function parse(options) {\n  const settings = options || {};\n  const constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n\n  /** @type {ParseContext} */\n  const parser = {\n    constructs,\n    content: create(content),\n    defined: [],\n    document: create(document),\n    flow: create(flow),\n    lazy: {},\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","/**\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\n */\n\n/**\n * @callback Preprocessor\n *   Preprocess a value.\n * @param {Value} value\n *   Value.\n * @param {Encoding | null | undefined} [encoding]\n *   Encoding when `value` is a typed array (optional).\n * @param {boolean | null | undefined} [end=false]\n *   Whether this is the last chunk (default: `false`).\n * @returns {Array<Chunk>}\n *   Chunks.\n */\n\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\n * @returns {Preprocessor}\n *   Preprocess a value.\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n    value = buffer + (typeof value === 'string' ? value.toString() : new TextDecoder(encoding || undefined).decode(value));\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n              while (column++ < next) chunks.push(-1);\n              break;\n            }\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n\n/**\n * @param {string} $0\n *   Match.\n * @param {string} $1\n *   Character escape.\n * @param {string} $2\n *   Character reference.\n * @returns {string}\n *   Decoded value\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0);\n  if (head === 35) {\n    const head = $2.charCodeAt(1);\n    const hex = head === 120 || head === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n  return decodeNamedCharacterReference($2) || $0;\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['buffer']}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler || undefined]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @type {CompileContext['resume']}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\nimport { subtokenize } from 'micromark-util-subtokenize';\n\n/**\n * @param {Array<Event>} events\n *   Events.\n * @returns {Array<Event>}\n *   Events.\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events;\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n      case 'ArrayBuffer':\n        return as(new Uint8Array(value).buffer, value);\n      case 'DataView': {\n        const { buffer } = new Uint8Array(value);\n        return as(new DataView(buffer), value);\n      }\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n    case 'DataView':\n      return [ARRAY, asString];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type) {\n          let spread = value;\n          if (type === 'DataView') {\n            spread = new Uint8Array(value.buffer);\n          }\n          else if (type === 'ArrayBuffer') {\n            spread = new Uint8Array(value);\n          }\n          return as([type, [...spread]], value);\n        }\n\n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","import { asciiAlphanumeric } from 'micromark-util-character';\nimport { encode } from 'micromark-util-encode';\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''));\n  if (!protocol) {\n    return value;\n  }\n  const colon = value.indexOf(':');\n  const questionMark = value.indexOf('?');\n  const numberSign = value.indexOf('#');\n  const slash = value.indexOf('/');\n  if (\n  // If there is no protocol, it’s relative.\n  colon < 0 ||\n  // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign ||\n  // It is a protocol, it should be allowed.\n  protocol.test(value.slice(0, colon))) {\n    return value;\n  }\n  return '';\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n  let start = 0;\n  let skip = 0;\n  while (++index < value.length) {\n    const code = value.charCodeAt(index);\n    /** @type {string} */\n    let replace = '';\n\n    // A correct percent encoded value.\n    if (code === 37 && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {\n      skip = 2;\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code);\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1);\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next);\n        skip = 1;\n      }\n      // Lone surrogate.\n      else {\n        replace = \"\\uFFFD\";\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code);\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace));\n      start = index + skip + 1;\n      replace = '';\n    }\n    if (skip) {\n      index += skip;\n      skip = 0;\n    }\n  }\n  return result.join('') + value.slice(start);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\n * @import {Processor} from 'unified'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * * if a processor is given,\n *   runs the (rehype) plugins used on it with a hast tree,\n *   then discards the result (*bridge mode*)\n * * otherwise,\n *   returns a hast tree,\n *   the plugins used after `remarkRehype` are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**:\n * > It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * * `rehype-stringify` also has an option `allowDangerousHtml` which will\n *   output the raw HTML.\n *   This is typically discouraged as noted by the option name but is useful if\n *   you completely trust authors\n * * `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *   into standard hast nodes (`element`, `text`, etc);\n *   this is a heavy task as it needs a full HTML parser,\n *   but it is the only way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark,\n * which we follow by default.\n * They are supported by GitHub,\n * so footnotes can be enabled in markdown with `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes,\n * which is hidden for sighted users but shown to assistive technology.\n * When your page is not in English,\n * you must define translated values.\n *\n * Back references use ARIA attributes,\n * but the section label itself uses a heading that is hidden with an\n * `sr-only` class.\n * To show it to sighted users,\n * define different attributes in `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem,\n * as it links footnote calls to footnote definitions on the page through `id`\n * attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * * when the node has a `value`\n *   (and doesn’t have `data.hName`, `data.hProperties`, or `data.hChildren`,\n *   see later),\n *   create a hast `text` node\n * * otherwise,\n *   create a `<div>` element (which could be changed with `data.hName`),\n *   with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @overload\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge | TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given,\n *   configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    // To do: in the future, disallow ` || options` fallback.\n    // With `unified-engine`, `destination` can be `undefined` but\n    // `options` will be the file set.\n    // We should not pass that as `options`.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(destination || options)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file = ''\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual = undefined\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected = undefined\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note = undefined\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url = undefined\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @import {Element, Nodes, Parents, Root} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {ComponentType, JSX, ReactElement, ReactNode} from 'react'\n * @import {Options as RemarkRehypeOptions} from 'remark-rehype'\n * @import {BuildVisitor} from 'unist-util-visit'\n * @import {PluggableList, Processor} from 'unified'\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n */\n\n/**\n * @typedef ExtraProps\n *   Extra fields we pass.\n * @property {Element | undefined} [node]\n *   passed when `passNode` is on.\n */\n\n/**\n * @typedef {{\n *   [Key in keyof JSX.IntrinsicElements]?: ComponentType<JSX.IntrinsicElements[Key] & ExtraProps> | keyof JSX.IntrinsicElements\n * }} Components\n *   Map tag names to components.\n */\n\n/**\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n */\n\n/**\n * @typedef HooksOptionsOnly\n *   Configuration specifically for {@linkcode MarkdownHooks}.\n * @property {ReactNode | null | undefined} [fallback]\n *   Content to render while the processor processing the markdown (optional).\n */\n\n/**\n * @typedef {Options & HooksOptionsOnly} HooksOptions\n *   Configuration for {@linkcode MarkdownHooks};\n *   extends the regular {@linkcode Options} with a `fallback` prop.\n */\n\n/**\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport {useEffect, useState} from 'react'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {from: 'className', id: 'remove-classname'},\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * This is a synchronous component.\n * When using async plugins,\n * see {@linkcode MarkdownAsync} or {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nexport function Markdown(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  return post(processor.runSync(processor.parse(file), file), options)\n}\n\n/**\n * Component to render markdown with support for async plugins\n * through async/await.\n *\n * Components returning promises are supported on the server.\n * For async support on the client,\n * see {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Promise<ReactElement>}\n *   Promise to a React element.\n */\nexport async function MarkdownAsync(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  const tree = await processor.run(processor.parse(file), file)\n  return post(tree, options)\n}\n\n/**\n * Component to render markdown with support for async plugins through hooks.\n *\n * This uses `useEffect` and `useState` hooks.\n * Hooks run on the client and do not immediately render something.\n * For async support on the server,\n * see {@linkcode MarkdownAsync}.\n *\n * @param {Readonly<HooksOptions>} options\n *   Props.\n * @returns {ReactNode}\n *   React node.\n */\nexport function MarkdownHooks(options) {\n  const processor = createProcessor(options)\n  const [error, setError] = useState(\n    /** @type {Error | undefined} */ (undefined)\n  )\n  const [tree, setTree] = useState(/** @type {Root | undefined} */ (undefined))\n\n  useEffect(\n    function () {\n      let cancelled = false\n      const file = createFile(options)\n\n      processor.run(processor.parse(file), file, function (error, tree) {\n        if (!cancelled) {\n          setError(error)\n          setTree(tree)\n        }\n      })\n\n      /**\n       * @returns {undefined}\n       *   Nothing.\n       */\n      return function () {\n        cancelled = true\n      }\n    },\n    [\n      options.children,\n      options.rehypePlugins,\n      options.remarkPlugins,\n      options.remarkRehypeOptions\n    ]\n  )\n\n  if (error) throw error\n\n  return tree ? post(tree, options) : options.fallback\n}\n\n/**\n * Set up the `unified` processor.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Processor<MdastRoot, MdastRoot, Root, undefined, undefined>}\n *   Result.\n */\nfunction createProcessor(options) {\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  return processor\n}\n\n/**\n * Set up the virtual file.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {VFile}\n *   Result.\n */\nfunction createFile(options) {\n  const children = options.children || ''\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  return file\n}\n\n/**\n * Process the result from unified some more.\n *\n * @param {Nodes} tree\n *   Tree.\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nfunction post(tree, options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  visit(tree, transform)\n\n  return toJsxRuntime(tree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {BuildVisitor<Root>} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n          ? disallowedElements.includes(node.tagName)\n          : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon === -1 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash !== -1 && colon > slash) ||\n    (questionMark !== -1 && colon > questionMark) ||\n    (numberSign !== -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @import {Nodes, Parents, PhrasingContent, Root, Text} from 'mdast'\n * @import {BuildVisitor, Test, VisitorResult} from 'unist-util-visit-parents'\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'\n * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n * @import {Link, PhrasingContent} from 'mdast'\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/gu, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    // If it’s an email, the previous character should not be a slash.\n    (!email || code !== 47)\n  )\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @import {\n *   CompileContext,\n *   Extension as FromMarkdownExtension,\n *   Handle as FromMarkdownHandle\n * } from 'mdast-util-from-markdown'\n * @import {ToMarkdownOptions} from 'mdast-util-gfm-footnote'\n * @import {\n *   Handle as ToMarkdownHandle,\n *   Map,\n *   Options as ToMarkdownExtension\n * } from 'mdast-util-to-markdown'\n * @import {FootnoteDefinition, FootnoteReference} from 'mdast'\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {after: ']', before: value})\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteCallString: enterFootnoteCallString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: enterFootnoteDefinition\n    },\n    exit: {\n      gfmFootnoteCallString: exitFootnoteCallString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: exitFootnoteDefinition\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown(options) {\n  // To do: next major: change default.\n  let firstLineBlank = false\n\n  if (options && options.firstLineBlank) {\n    firstLineBlank = true\n  }\n\n  return {\n    handlers: {footnoteDefinition, footnoteReference},\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['label', 'phrasing', 'reference']}]\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteDefinition} node\n   */\n  function footnoteDefinition(node, _, state, info) {\n    const tracker = state.createTracker(info)\n    let value = tracker.move('[^')\n    const exit = state.enter('footnoteDefinition')\n    const subexit = state.enter('label')\n    value += tracker.move(\n      state.safe(state.associationId(node), {before: value, after: ']'})\n    )\n    subexit()\n\n    value += tracker.move(']:')\n\n    if (node.children && node.children.length > 0) {\n      tracker.shift(4)\n\n      value += tracker.move(\n        (firstLineBlank ? '\\n' : ' ') +\n          state.indentLines(\n            state.containerFlow(node, tracker.current()),\n            firstLineBlank ? mapAll : mapExceptFirst\n          )\n      )\n    }\n\n    exit()\n\n    return value\n  }\n}\n\n/** @type {Map} */\nfunction mapExceptFirst(line, index, blank) {\n  return index === 0 ? line : mapAll(line, index, blank)\n}\n\n/** @type {Map} */\nfunction mapAll(line, index, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","// To do: next major: remove.\n/**\n * @typedef {Options} MarkdownTableOptions\n *   Configuration.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [alignDelimiters=true]\n *   Whether to align the delimiters (default: `true`);\n *   they are aligned by default:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\n *   How to align columns (default: `''`);\n *   one style for all columns or styles for their respective columns;\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\n *   other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left;\n *   *only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean | null | undefined} [delimiterEnd=true]\n *   Whether to end each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean | null | undefined} [delimiterStart=true]\n *   Whether to begin each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean | null | undefined} [padding=true]\n *   Whether to add a space of padding between delimiters and cells\n *   (default: `true`).\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {((value: string) => number) | null | undefined} [stringLength]\n *   Function to detect the length of table cell content (optional);\n *   this is used when aligning the delimiters (`|`) between table cells;\n *   full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source;\n *   to fix this, you can pass this function,\n *   which receives the cell content and returns its “visible” size;\n *   note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @param {string} value\n *   Cell value.\n * @returns {number}\n *   Cell size.\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * Generate a markdown\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\n * table.\n *\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\n *   Table data (matrix of strings).\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Result.\n */\nexport function markdownTable(table, options) {\n  const settings = options || {}\n  // To do: next major: change to spread.\n  const align = (settings.align || []).concat()\n  const stringLength = settings.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      settings.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (settings.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        settings.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(settings.alignDelimiters === false && cell === '') &&\n        (settings.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (settings.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (settings.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (settings.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        settings.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      settings.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string | null | undefined} [value]\n *   Value to serialize.\n * @returns {string}\n *   Result.\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string | null | undefined} value\n *   Value.\n * @returns {number}\n *   Alignment.\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n      ? 108 /* `l` */\n      : code === 82 /* `R` */ || code === 114 /* `r` */\n        ? 114 /* `r` */\n        : 0\n}\n","/**\n * @import {Blockquote, Parents} from 'mdast'\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @import {Break, Parents} from 'mdast'\n * @import {Info, State} from 'mdast-util-to-markdown'\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {Code, Parents} from 'mdast'\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * Encode a code point as a character reference.\n *\n * @param {number} code\n *   Code point to encode.\n * @returns {string}\n *   Encoded character reference.\n */\nexport function encodeCharacterReference(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * @import {EncodeSides} from '../types.js'\n */\n\nimport {classifyCharacter} from 'micromark-util-classify-character'\n\n/**\n * Check whether to encode (as a character reference) the characters\n * surrounding an attention run.\n *\n * Which characters are around an attention run influence whether it works or\n * not.\n *\n * See <https://github.com/orgs/syntax-tree/discussions/60> for more info.\n * See this markdown in a particular renderer to see what works:\n *\n * ```markdown\n * |                         | A (letter inside) | B (punctuation inside) | C (whitespace inside) | D (nothing inside) |\n * | ----------------------- | ----------------- | ---------------------- | --------------------- | ------------------ |\n * | 1 (letter outside)      | x*y*z             | x*.*z                  | x* *z                 | x**z               |\n * | 2 (punctuation outside) | .*y*.             | .*.*.                  | .* *.                 | .**.               |\n * | 3 (whitespace outside)  | x *y* z           | x *.* z                | x * * z               | x ** z             |\n * | 4 (nothing outside)     | *x*               | *.*                    | * *                   | **                 |\n * ```\n *\n * @param {number} outside\n *   Code point on the outer side of the run.\n * @param {number} inside\n *   Code point on the inner side of the run.\n * @param {'*' | '_'} marker\n *   Marker of the run.\n *   Underscores are handled more strictly (they form less often) than\n *   asterisks.\n * @returns {EncodeSides}\n *   Whether to encode characters.\n */\n// Important: punctuation must never be encoded.\n// Punctuation is solely used by markdown constructs.\n// And by encoding itself.\n// Encoding them will break constructs or double encode things.\nexport function encodeInfo(outside, inside, marker) {\n  const outsideKind = classifyCharacter(outside)\n  const insideKind = classifyCharacter(inside)\n\n  // Letter outside:\n  if (outsideKind === undefined) {\n    return insideKind === undefined\n      ? // Letter inside:\n        // we have to encode *both* letters for `_` as it is looser.\n        // it already forms for `*` (and GFMs `~`).\n        marker === '_'\n        ? {inside: true, outside: true}\n        : {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (letter, whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: encode outer (letter)\n          {inside: false, outside: true}\n  }\n\n  // Whitespace outside:\n  if (outsideKind === 1) {\n    return insideKind === undefined\n      ? // Letter inside: already forms.\n        {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: already forms.\n          {inside: false, outside: false}\n  }\n\n  // Punctuation outside:\n  return insideKind === undefined\n    ? // Letter inside: already forms.\n      {inside: false, outside: false}\n    : insideKind === 1\n      ? // Whitespace inside: encode inner (whitespace).\n        {inside: true, outside: false}\n      : // Punctuation inside: already forms.\n        {inside: false, outside: false}\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Emphasis, Parents} from 'mdast'\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nemphasis.peek = emphasisPeek\n\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Heading} from 'mdast'\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @import {Html} from 'mdast'\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Image, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {ImageReference, Parents} from 'mdast'\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {InlineCode, Parents} from 'mdast'\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Link} from 'mdast'\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Link, Parents} from 'mdast'\n * @import {Exit} from '../types.js'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {LinkReference, Parents} from 'mdast'\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Strong} from 'mdast'\n */\n\nimport {checkStrong} from '../util/check-strong.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nstrong.peek = strongPeek\n\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker + marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker + marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Code} from 'mdast'\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Definition, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Heading, Parents} from 'mdast'\n */\n\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {List, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {ListItem, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Paragraph, Parents} from 'mdast'\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Root} from 'mdast'\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n\n  const container = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return container.call(state, node, info)\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Text} from 'mdast'\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Parents, ThematicBreak} from 'mdast'\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @import {Blockquote, Parents} from 'mdast'\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @import {Break, Parents} from 'mdast'\n * @import {Info, State} from 'mdast-util-to-markdown'\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {Code, Parents} from 'mdast'\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * Encode a code point as a character reference.\n *\n * @param {number} code\n *   Code point to encode.\n * @returns {string}\n *   Encoded character reference.\n */\nexport function encodeCharacterReference(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * @import {EncodeSides} from '../types.js'\n */\n\nimport {classifyCharacter} from 'micromark-util-classify-character'\n\n/**\n * Check whether to encode (as a character reference) the characters\n * surrounding an attention run.\n *\n * Which characters are around an attention run influence whether it works or\n * not.\n *\n * See <https://github.com/orgs/syntax-tree/discussions/60> for more info.\n * See this markdown in a particular renderer to see what works:\n *\n * ```markdown\n * |                         | A (letter inside) | B (punctuation inside) | C (whitespace inside) | D (nothing inside) |\n * | ----------------------- | ----------------- | ---------------------- | --------------------- | ------------------ |\n * | 1 (letter outside)      | x*y*z             | x*.*z                  | x* *z                 | x**z               |\n * | 2 (punctuation outside) | .*y*.             | .*.*.                  | .* *.                 | .**.               |\n * | 3 (whitespace outside)  | x *y* z           | x *.* z                | x * * z               | x ** z             |\n * | 4 (nothing outside)     | *x*               | *.*                    | * *                   | **                 |\n * ```\n *\n * @param {number} outside\n *   Code point on the outer side of the run.\n * @param {number} inside\n *   Code point on the inner side of the run.\n * @param {'*' | '_'} marker\n *   Marker of the run.\n *   Underscores are handled more strictly (they form less often) than\n *   asterisks.\n * @returns {EncodeSides}\n *   Whether to encode characters.\n */\n// Important: punctuation must never be encoded.\n// Punctuation is solely used by markdown constructs.\n// And by encoding itself.\n// Encoding them will break constructs or double encode things.\nexport function encodeInfo(outside, inside, marker) {\n  const outsideKind = classifyCharacter(outside)\n  const insideKind = classifyCharacter(inside)\n\n  // Letter outside:\n  if (outsideKind === undefined) {\n    return insideKind === undefined\n      ? // Letter inside:\n        // we have to encode *both* letters for `_` as it is looser.\n        // it already forms for `*` (and GFMs `~`).\n        marker === '_'\n        ? {inside: true, outside: true}\n        : {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (letter, whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: encode outer (letter)\n          {inside: false, outside: true}\n  }\n\n  // Whitespace outside:\n  if (outsideKind === 1) {\n    return insideKind === undefined\n      ? // Letter inside: already forms.\n        {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: already forms.\n          {inside: false, outside: false}\n  }\n\n  // Punctuation outside:\n  return insideKind === undefined\n    ? // Letter inside: already forms.\n      {inside: false, outside: false}\n    : insideKind === 1\n      ? // Whitespace inside: encode inner (whitespace).\n        {inside: true, outside: false}\n      : // Punctuation inside: already forms.\n        {inside: false, outside: false}\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Emphasis, Parents} from 'mdast'\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nemphasis.peek = emphasisPeek\n\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Heading} from 'mdast'\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @import {Html} from 'mdast'\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Image, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {ImageReference, Parents} from 'mdast'\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {InlineCode, Parents} from 'mdast'\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Link} from 'mdast'\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Link, Parents} from 'mdast'\n * @import {Exit} from '../types.js'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {LinkReference, Parents} from 'mdast'\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Strong} from 'mdast'\n */\n\nimport {checkStrong} from '../util/check-strong.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nstrong.peek = strongPeek\n\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker + marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker + marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Code} from 'mdast'\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Definition, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Heading, Parents} from 'mdast'\n */\n\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {List, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {ListItem, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Paragraph, Parents} from 'mdast'\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Root} from 'mdast'\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n\n  const container = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return container.call(state, node, info)\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Text} from 'mdast'\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Parents, ThematicBreak} from 'mdast'\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  name: 'wwwAutolink',\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  name: 'protocolAutolink',\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  name: 'emailAutolink',\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\n\n/** @type {ConstructRecord} */\nconst text = {};\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  };\n}\n\n/** @type {Code} */\nlet code = 48;\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this;\n  /** @type {boolean | undefined} */\n  let dot;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkEmail');\n    return atext(code);\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code);\n      return atext;\n    }\n    if (code === 64) {\n      effects.consume(code);\n      return emailDomain;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true;\n      effects.consume(code);\n      return emailDomain;\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code);\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code);\n    dot = true;\n    return emailDomain;\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail');\n      effects.exit('literalAutolink');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this;\n  return wwwStart;\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkWww');\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this;\n  let buffer = '';\n  let seen = false;\n  return protocolStart;\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter('literalAutolink');\n      effects.enter('literalAutolinkHttp');\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code);\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++;\n      effects.consume(code);\n      return wwwPrefixInside;\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code);\n      return wwwPrefixAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code);\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment;\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment;\n  /** @type {boolean | undefined} */\n  let seen;\n  return domainInside;\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\n      return domainAfter(code);\n    }\n    seen = true;\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true;\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = undefined;\n    }\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code);\n    }\n    return ok(code);\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++;\n      effects.consume(code);\n      return pathInside;\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code);\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\n      return effects.check(trail, ok, pathAtPunctuation)(code);\n    }\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++;\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail;\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\n      effects.consume(code);\n      return trail;\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code);\n      return trailCharacterReferenceStart;\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code);\n      return trailBracketAfter;\n    }\n    if (\n    // `<` is an end.\n    code === 60 ||\n    // So is whitespace.\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return trail(code);\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharacterReferenceInside(code) : nok(code);\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code);\n      return trail;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return trailCharacterReferenceInside;\n    }\n\n    // It’s not a trail.\n    return nok(code);\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start;\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code);\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code));\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\n      result = true;\n      break;\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        name: 'gfmFootnoteDefinition',\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: 'gfmFootnoteCall',\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: 'gfmPotentialFootnoteCall',\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if we’ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: \"chunkString\",\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: 'strikethrough',\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              // Between.\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = [];\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImplementation(this, index, remove, add);\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImplementation(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return;\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length;\n    /** @type {Array<Array<Event>>} */\n    const vecs = [];\n    while (index > 0) {\n      index -= 1;\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\n\n      // Truncate rest.\n      events.length = this.map[index][0];\n    }\n    vecs.push(events.slice());\n    events.length = 0;\n    let slice = vecs.pop();\n    while (slice) {\n      for (const element of slice) {\n        events.push(element);\n      }\n      slice = vecs.pop();\n    }\n\n    // Truncate everything.\n    this.map.length = 0;\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImplementation(editMap, at, remove, add) {\n  let index = 0;\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return;\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove;\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add);\n      // }\n\n      return;\n    }\n    index += 1;\n  }\n  editMap.map.push([at, remove, add]);\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  /** @type {Array<Align>} */\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}","/**\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { EditMap } from './edit-map.js';\nimport { gfmTableAlign } from './infer.js';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: 'table',\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  /** @type {boolean | undefined} */\n  let seen;\n  return start;\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" ||\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    return next(code);\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead');\n    effects.enter('tableRow');\n    return headRowStart(code);\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code);\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true;\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1;\n    return headRowBreak(code);\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0;\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true;\n        effects.exit('tableRow');\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      // Header cell count.\n      size += 1;\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      // Whether a delimiter was seen.\n      seen = true;\n      return headRowBreak;\n    }\n\n    // Anything else is cell data.\n    effects.enter(\"data\");\n    return headRowData(code);\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return headRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? headRowEscape : headRowData;\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return headRowData;\n    }\n    return headRowData(code);\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false;\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    effects.enter('tableDelimiterRow');\n    // Track if we’ve seen a `:` or `|`.\n    seen = false;\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return headDelimiterBefore(code);\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code);\n    }\n    if (code === 124) {\n      seen = true;\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return headDelimiterCellBefore;\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\n    }\n    return headDelimiterValueBefore(code);\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterLeftAlignmentAfter;\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1;\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller');\n      return headDelimiterFiller(code);\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return headDelimiterFiller;\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true;\n      effects.exit('tableDelimiterFiller');\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit('tableDelimiterFiller');\n    return headDelimiterRightAlignmentAfter(code);\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\n    }\n    return headDelimiterCellAfter(code);\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code);\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow');\n      effects.exit('tableHead');\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code);\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow');\n    return bodyRowBreak(code);\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return bodyRowBreak;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow');\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\n    }\n\n    // Anything else is cell content.\n    effects.enter(\"data\");\n    return bodyRowData(code);\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? bodyRowEscape : bodyRowData;\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return bodyRowData;\n    }\n    return bodyRowData(code);\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  /** @type {RowKind} */\n  let rowKind = 0;\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0];\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  /** @type {Token | undefined} */\n  let currentTable;\n  /** @type {Token | undefined} */\n  let currentBody;\n  /** @type {Token | undefined} */\n  let currentCell;\n  const map = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false;\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n          currentBody = undefined;\n          lastTableEnd = 0;\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map.add(index, 0, [['enter', currentTable, context]]);\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n        inFirstCellAwaitingPipe = true;\n        currentCell = undefined;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map.add(index, 0, [['enter', currentBody, context]]);\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\n      }\n      // Cell data.\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n        inFirstCellAwaitingPipe = false;\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n  }\n  map.consume(context.events);\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent';\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map.add(range[0], 0, [['exit', previousCell, context]]);\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map.add(range[1], 0, [['enter', previousCell, context]]);\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map.add(range[2], 0, [['enter', valueToken, context]]);\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map.add(a, b, []);\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\n    previousCell = undefined;\n  }\n  return previousCell;\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push(['exit', tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push(['exit', table, context]);\n  map.add(index + 1, 0, exits);\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === 'enter' ? 'start' : 'end';\n  return event[1][side];\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nconst tasklistCheck = {\n  name: 'tasklistCheck',\n  tokenize: tokenizeTasklistCheck\n};\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== null ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, \"whitespace\");\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code);\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @import {Root} from 'mdast'\n * @import {Options} from 'remark-gfm'\n * @import {} from 'remark-parse'\n * @import {} from 'remark-stringify'\n * @import {Processor} from 'unified'\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor<Root>} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @import {Extension as FromMarkdownExtension} from 'mdast-util-from-markdown'\n * @import {Options} from 'mdast-util-gfm'\n * @import {Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(options),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","import * as React from \"react\";\nimport { useEffect, useState, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Seo } from \"../components/SEO\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\n\nimport { Layout } from \"../components\";\nimport data from \"../data/blog.json\";\n\nconst Post = ({ location, pageContext }) => {\n    const { slug } = pageContext;\n    const postEdge = data.allPosts.edges.find((edge) => edge.node.slug === slug);\n    const post = postEdge ? postEdge.node : null;\n\n    const [content, setContent] = useState(\"\");\n    const [headings, setHeadings] = useState([]);\n    const [isSidebarOpen, setIsSidebarOpen] = useState(false); // 控制側邊欄開關\n    const [showScrollTop, setShowScrollTop] = useState(false); // 新增：控制回到頂部按鈕的狀態\n    const [scrollBtnBottom, setScrollBtnBottom] = useState(30); // 新增：動態調整按鈕與底部距離，避免與 footer 重疊\n    const [scrollBtnRight, setScrollBtnRight] = useState(10); // 新增：對齊文章內容右側\n    const [activeHeadingId, setActiveHeadingId] = useState(null); // 新增：目前章節\n    const headingRefs = useRef({});\n    const sidebarRef = useRef(null); // 新增 Ref 來監聽側邊欄\n    const contentRef = useRef(null); // 文章內容容器，用於定位回到頂部按鈕\n\n    useEffect(() => {\n        if (post && post.html) {\n            fetch(post.html)\n                .then((res) => res.text())\n                .then((data) => {\n                    setContent(data);\n                    extractHeadings(data);\n                })\n                .catch((err) => console.error(\"Failed to load content:\", err));\n        }\n    }, [post]);\n\n    // 只提取 h2 標題\n    const extractHeadings = (markdown) => {\n        const headingRegex = /^##\\s+(.+)$/gm;\n        const matches = [...markdown.matchAll(headingRegex)];\n        const parsedHeadings = matches.map((match) => ({\n            text: match[1],\n            id: match[1].toLowerCase().replace(/\\s+/g, \"-\"),\n        }));\n\n        setHeadings(parsedHeadings);\n        parsedHeadings.forEach((heading) => {\n            headingRefs.current[heading.id] = React.createRef();\n        });\n    };\n\n    // 滾動到指定標題\n    const scrollToHeading = (id) => {\n        const target = headingRefs.current[id]?.current;\n        if (target) {\n            // 取得固定於頂部的導覽或整個 header 高度，避免被遮住\n            const headerEl = document.querySelector('.site-head') || document.querySelector('.site-nav');\n            const fixedTopHeight = headerEl ? headerEl.getBoundingClientRect().height : 0;\n            const extraGap = 8; // 與導覽保持一點距離，避免貼齊\n\n            const targetTop = target.getBoundingClientRect().top + window.scrollY;\n            const scrollTop = Math.max(0, targetTop - fixedTopHeight - extraGap);\n            window.scrollTo({ top: scrollTop, behavior: 'smooth' });\n            // 立即高亮所點擊的章節，避免過渡期間顯示為上一個\n            setActiveHeadingId(id);\n            setIsSidebarOpen(false); // 滾動後自動關閉側邊欄（在手機模式下）\n        }\n    };\n\n    // 監聽點擊空白處來關閉側邊欄\n    useEffect(() => {\n        const handleClickOutside = (event) => {\n            if (isSidebarOpen && sidebarRef.current && !sidebarRef.current.contains(event.target)) {\n                setIsSidebarOpen(false);\n            }\n        };\n\n        if (isSidebarOpen) {\n            document.addEventListener(\"mousedown\", handleClickOutside);\n        } else {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        }\n\n        return () => {\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n    }, [isSidebarOpen]);\n\n    useEffect(() => {\n        const updateScrollUI = () => {\n            // 顯示／隱藏「回到頂部」按鈕\n            setShowScrollTop(window.scrollY > 200);\n\n            // 動態調整避免與 footer 重疊\n            const footer = document.querySelector('.site-foot');\n            if (footer) {\n                const rect = footer.getBoundingClientRect();\n                // 若 footer 進入視窗，計算重疊高度，並加到預設 bottom 空隙\n                const overlap = Math.max(0, window.innerHeight - rect.top);\n                setScrollBtnBottom(30 + overlap);\n            } else {\n                setScrollBtnBottom(30);\n            }\n\n            // 讓按鈕水平對齊文章內容的右側\n            const container = contentRef.current || document.querySelector('.content');\n            if (container) {\n                const cRect = container.getBoundingClientRect();\n                // 與內容右側保持 10px 內距，同時不得小於 10px\n                const rightGap = Math.max(10, window.innerWidth - cRect.right + 10);\n                setScrollBtnRight(rightGap);\n            } else {\n                setScrollBtnRight(10);\n            }\n\n            // 計算目前章節（考慮固定頂部導覽高度）\n        const headerEl = document.querySelector('.site-head') || document.querySelector('.site-nav');\n        const fixedTop = headerEl ? headerEl.getBoundingClientRect().height : 0;\n        const gap = 8;\n        const activationOffset = 16; // 容忍距離，避免剛好落在頂部邊界時亮起上一個\n            if (headings && headings.length > 0) {\n                let currentId = headings[0].id;\n                for (let i = 0; i < headings.length; i++) {\n                    const h = headings[i];\n                    const el = headingRefs.current[h.id]?.current || document.getElementById(h.id);\n                    if (!el) continue;\n            const top = el.getBoundingClientRect().top - fixedTop - gap;\n            if (top <= activationOffset) {\n                        currentId = h.id;\n                    } else {\n                        break;\n                    }\n                }\n                setActiveHeadingId(currentId);\n            } else {\n                setActiveHeadingId(null);\n            }\n        };\n\n        window.addEventListener(\"scroll\", updateScrollUI);\n        window.addEventListener(\"resize\", updateScrollUI);\n        // 初始執行一次，確保正確位置\n        updateScrollUI();\n\n        return () => {\n            window.removeEventListener(\"scroll\", updateScrollUI);\n            window.removeEventListener(\"resize\", updateScrollUI);\n        };\n    }, [headings]);\n\n    const scrollToTop = () => {\n        window.scrollTo({ top: 0, behavior: \"smooth\" }); // 新增：平滑滾動回到頂部\n    };\n\n    \n\n    if (!post) {\n        return (\n            <Layout>\n                <div className=\"post-container\">\n                    <h1>Post not found</h1>\n                    <p>Sorry, the post you are looking for does not exist.</p>\n                </div>\n            </Layout>\n        );\n    }\n\n    return (\n        <Layout>\n            <Seo\n                title={post.title ? `${post.title} - CZ-Huang Blog` : 'Article - CZ-Huang Blog'}\n                description={post.description || post.excerpt || 'CZ-Huang Blog Article Content'}\n                image={post.cover || undefined}\n                pathname={location && location.pathname}\n            />\n            {/* 漢堡選單按鈕（手機和平板時顯示） */}\n            <button className=\"hamburger-menu\" onClick={() => setIsSidebarOpen(!isSidebarOpen)}>\n            »\n            </button>\n\n            <div className=\"post-layout\">\n                {/* 側邊欄（桌面模式固定，手機模式變成可開關的菜單） */}\n                {headings.length > 0 && (\n                    <aside ref={sidebarRef} className={`sidebar ${isSidebarOpen ? \"open\" : \"\"}`}>\n                        <ul>\n                            {headings.map((heading) => (\n                                <li key={heading.id}>\n                                    <button\n                                        onClick={() => scrollToHeading(heading.id)}\n                                        className={activeHeadingId === heading.id ? 'active' : ''}\n                                        aria-current={activeHeadingId === heading.id ? 'true' : undefined}\n                                    >\n                                        {heading.text}\n                                    </button>\n                                </li>\n                            ))}\n                        </ul>\n                    </aside>\n                )}\n\n                {/* 主要內容區域 */}\n                <article className=\"content\" ref={contentRef}>\n                    <section className=\"post-full-content\">\n                        <h1 className=\"content-title\">{post.title}</h1>\n                        <section className=\"content-body load-external-scripts\">\n                            <ReactMarkdown\n                                remarkPlugins={[remarkGfm]}\n                                components={{\n                                    h2: ({ node, children }) => {\n                                        const id = children.toString().toLowerCase().replace(/\\s+/g, \"-\");\n                                        return (\n                                            <h2 id={id} ref={headingRefs.current[id]}>\n                                                {children}\n                                            </h2>\n                                        );\n                                    },\n                                }}\n                            >\n                                {content}\n                            </ReactMarkdown>\n                        </section>\n                    </section>\n                    {showScrollTop && (\n                        <button\n                            className=\"scroll-to-top\"\n                            onClick={scrollToTop}\n                            style={{ bottom: `${scrollBtnBottom}px`, right: `${scrollBtnRight}px` }}\n                        >\n                            ▲\n                        </button>\n                    )}\n                </article>\n            </div>\n\n            {/* 樣式 */}\n            <style jsx>{`\n                /* 主要佈局 */\n                .post-layout {\n                    display: flex;\n                    width: 100%;\n                    max-width: 1200px;\n                    margin: 0 auto;\n                    padding: 20px;\n                    position: relative; /* 讓行動版側欄以此為定位範圍，只在文章畫面內出現 */\n                }\n                /* 讓所有 H2 在捲動至視窗頂部時，預留固定導覽高度 */\n                .content h2 { scroll-margin-top: calc(var(--site-head-offset, 0px) + 8px); }\n\n                /* 漢堡按鈕 */\n                .hamburger-menu {\n                    display: none;\n                    position: fixed;\n                    top: 50%;\n                    left: 10px;\n                    transform: translateY(-50%); /* 讓按鈕垂直置中 */\n                    background: #ddd; /* 淺灰色背景 */\n                    color: black; /* 文字顏色 */\n                    border: none;\n                    width: 40px; /* 長方形寬度 */\n                    height: 40px; /* 長方形高度 */\n                    font-size: 30px; /* 調整 icon 大小 */\n                    cursor: pointer;\n                    border-radius: 10px; /* 設定圓角 */\n                    z-index: 10;\n                    transition: background 0.3s ease, transform 0.2s ease;\n                    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.5); /* 強化陰影 */\n                }\n\n                /* 文章容器：提供絕對定位的參考 */\n                .content {\n                    position: relative;\n                }\n\n                .hamburger-menu:hover {\n                    background: #ccc; /* 淺灰 hover 效果 */\n                    transform: translateY(-50%) scale(1.05); /* 略微放大 */\n                }\n\n                /* 側邊欄（桌機/平板）：固定於視窗，不受捲動影響，垂直置中且高度自動 */\n                .sidebar {\n                    position: fixed;\n                    top: calc(var(--site-head-offset, 0px) + (100vh - var(--site-head-offset, 0px)) / 2);\n                    left: max(20px, calc((100vw - 1200px) / 2 + 20px));\n                    width: 240px;\n                    height: auto; /* 隨內容自動增高 */\n                    max-height: calc(100vh - var(--site-head-offset, 0px) - 40px); /* 不超出視窗 */\n                    transform: translateY(-50%); /* 垂直置中 */\n                    padding: 15px;\n                    background: rgba(255, 255, 255, 0.3);\n                    backdrop-filter: blur(10px);\n                    border-radius: 12px;\n                    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n                    transition: all 0.3s ease-in-out;\n                    z-index: 5;\n                }\n\n                /* 桌機/平板：為固定側欄預留空間，避免內容被覆蓋 */\n                @media (min-width: 769px) {\n                    .content { margin-left: 280px; }\n                }\n\n                /* 側邊欄內部樣式 */\n                .sidebar ul {\n                    list-style: none;\n                    padding: 0;\n                    margin: 0;\n                    width: 100%;\n                }\n\n                .sidebar li {\n                    margin: 5px 0;\n                }\n\n                .sidebar button {\n                    background: none;\n                    border: none;\n                    text-align: left;\n                    color: #333;\n                    cursor: pointer;\n                    font-size: 15px;\n                    padding: 8px 8px;\n                    display: block;\n                    width: 100%;\n                    border-radius: 8px;\n                    transition: all 0.3s ease;\n                }\n\n                .sidebar button:hover {\n                    background: rgba(255, 255, 255, 0.4);\n                    color: #000;\n                    transform: translateX(5px);\n                }\n\n                /* 目前章節高亮 */\n                .sidebar button.active {\n                    background: rgba(0, 0, 0, 0.08);\n                    color: #000;\n                    font-weight: 600;\n                }\n\n                /* 手機模式：側欄固定於視窗，使用漢堡切換 */\n                @media (max-width: 768px) {\n                    .hamburger-menu {\n                        display: block;\n                    }\n\n                    .sidebar {\n            position: fixed;                                   /* 固定在視窗，隨捲動可見 */\n            top: calc(var(--site-head-offset, 0px) + 10px);    /* 位於 header 下方 */\n                        left: 0;\n                        width: 260px;\n                        height: auto;\n                        max-height: calc(100vh - var(--site-head-offset, 0px) - 20px); /* 不超出可視高度 */\n                        background: #f8f8f8;\n                        padding: 20px;\n                        transform: translateX(-110%);                      /* 預設收起，隱於左側 */\n                        transition: transform 0.35s ease-in-out;\n                        box-shadow: 4px 0px 10px rgba(0, 0, 0, 0.2);\n                        z-index: 20;                                       /* 高於文章內容與按鈕 */\n                        overflow: auto;                                     /* 內容過長可捲動 */\n                    }\n\n                    .sidebar.open {\n                        transform: translateX(0);\n                    }\n\n                    .content { margin-left: 0; padding: 20px; }\n                }\n\n                .scroll-to-top {\n                    position: fixed; /* 固定在視窗上 */\n                    bottom: 30px;\n                    right: 10px;\n                    z-index: 25; /* 避免被側邊欄或其他元素遮住 */\n                    background: #ddd; /* 淺灰色背景 */\n                    color: black;\n                    border: none;\n                    width: 40px; /* 設定正方形寬度 */\n                    height: 40px; /* 設定正方形高度 */\n                    font-size: 20px;\n                    cursor: pointer;\n                    border-radius: 10px; /* 設定圓角 */\n                    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.5); /* 強化陰影 */\n                    transition: background 0.3s ease, transform 0.2s ease, box-shadow 0.2s ease;\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                }\n\n                .scroll-to-top:hover {\n                    background: #ccc;\n                    transform: scale(1.05); /* 略微放大 */\n                    box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.3); /* 增強陰影 */\n                }\n\n            `}</style>\n        </Layout>\n    );\n};\n\nPost.propTypes = {\n    location: PropTypes.object.isRequired,\n};\n\nexport default Post;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.camelCase = void 0;\nvar CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9_-]+$/;\nvar HYPHEN_REGEX = /-([a-z])/g;\nvar NO_HYPHEN_REGEX = /^[^-]+$/;\nvar VENDOR_PREFIX_REGEX = /^-(webkit|moz|ms|o|khtml)-/;\nvar MS_VENDOR_PREFIX_REGEX = /^-(ms)-/;\n/**\n * Checks whether to skip camelCase.\n */\nvar skipCamelCase = function (property) {\n    return !property ||\n        NO_HYPHEN_REGEX.test(property) ||\n        CUSTOM_PROPERTY_REGEX.test(property);\n};\n/**\n * Replacer that capitalizes first character.\n */\nvar capitalize = function (match, character) {\n    return character.toUpperCase();\n};\n/**\n * Replacer that removes beginning hyphen of vendor prefix property.\n */\nvar trimHyphen = function (match, prefix) { return \"\".concat(prefix, \"-\"); };\n/**\n * CamelCases a CSS property.\n */\nvar camelCase = function (property, options) {\n    if (options === void 0) { options = {}; }\n    if (skipCamelCase(property)) {\n        return property;\n    }\n    property = property.toLowerCase();\n    if (options.reactCompat) {\n        // `-ms` vendor prefix should not be capitalized\n        property = property.replace(MS_VENDOR_PREFIX_REGEX, trimHyphen);\n    }\n    else {\n        // for non-React, remove first hyphen so vendor prefix is not capitalized\n        property = property.replace(VENDOR_PREFIX_REGEX, trimHyphen);\n    }\n    return property.replace(HYPHEN_REGEX, capitalize);\n};\nexports.camelCase = camelCase;\n//# sourceMappingURL=utilities.js.map"],"names":["COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","module","exports","style","options","TypeError","lineno","column","updatePosition","lines","match","length","i","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","prototype","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","value","decl","decls","declarations","hasOwn","Object","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","name","enumerable","configurable","newValue","writable","getProperty","extend","src","copy","copyIsArray","clone","arguments","deep","__importDefault","mod","__esModule","iterator","styleObject","inline_style_parser_1","default","hasIterator","forEach","style_to_object_1","utilities_1","StyleToJS","output","camelCase","ok","unreachable","nameRe","nameReJsx","emptyOptions","jsx","test","empty","Schema","normal","space","merge","definitions","definition","assign","normalize","toLowerCase","undefined","Info","attribute","booleanish","boolean","commaOrSpaceSeparated","commaSeparated","defined","mustUseProperty","number","overloadedBoolean","spaceSeparated","powers","increment","checks","keys","DefinedInfo","mask","index","super","mark","check","values","create","properties","normals","entries","info","transform","attributes","includes","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","_","caseSensitiveTransform","caseInsensitiveTransform","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","alt","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","className","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","list","loading","loop","low","manifest","max","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","size","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","title","translate","typeMustMatch","useMap","width","wrap","writingSuggestions","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","code","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","prefix","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","d","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","from","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","result","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xmlns","xmlnsxlink","xmlnsXLink","xml","xmlBase","xmlLang","xmlSpace","cap","dash","valid","kebab","$0","camelcase","toUpperCase","hastToReact","point","pointStart","VFileMessage","causeOrReason","optionsOrParentOrPlace","legacyCause","place","ancestors","cause","message","ruleId","indexOf","parent","fatal","file","stack","actual","expected","note","url","own","emptyMap","Map","tableElements","Set","tableCellElement","docs","toJsxRuntime","tree","Fragment","filePath","development","jsxDEV","props","isStaticChildren","children","columnNumber","fileName","lineNumber","developmentCreate","jsxs","fn","productionCreate","state","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","schema","stylePropertyNameCase","tableCellAlignToStyle","one","parentSchema","tagName","findComponentFromName","alignValue","createProperty","has","createElementProps","createChildren","child","thing","addNode","addChildren","pop","estree","expression","body","evaluateExpression","crashEstree","mdxExpression","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","root","countsByName","count","get","set","Type","rest","dashes","find","Number","isNaN","settings","join","padRight","padLeft","reactCompat","parseStyle","String","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","split","computed","Boolean","optional","toDash","urlAttributes","icon","includeImageAlt","includeHtml","splice","remove","items","parameters","chunkStart","unshift","SpliceBuffer","initial","left","right","RangeError","shift","setCursor","stop","POSITIVE_INFINITY","reverse","concat","deleteCount","Math","trunc","removed","chunkedPush","item","pushMany","unshiftMany","n","subtokenize","eventsArray","jumps","lineIndex","otherIndex","otherEvent","subevents","more","events","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","token","context","startPosition","startPositions","tokenizer","parser","_contentTypeTextTrailing","childEvents","gaps","stream","previous","current","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","syntaxExtension","all","extension","hook","constructs","existing","before","add","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","fromCharCode","factorySpace","effects","limit","enter","consume","exit","tokenize","contentStart","attempt","contentInitial","lineStart","self","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","endOfFile","seen","entry","nok","document","disable","null","blankLine","partial","after","resolve","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","field","resolveAllLineSuffixes","notText","atBreak","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","_bufferIndex","_index","thematicBreak","marker","sequence","onBlank","notBlank","furtherBlankLines","initialBlankLine","notInCurrentItem","indentConstruct","initialSize","atMarker","inside","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","normalizeIdentifier","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","resolveTo","heading","paragraph","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","character","textContent","numeric","characterEscape","lineEnding","called","labelEnd","newEvents","close","_inactive","_balanced","group","insideSpan","labelStart","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","attention","openingSequence","closingSequence","use","nextEvents","_close","_open","movePoint","attentionMarkers","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","returnState","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","tailExitIndex","headEnterIndex","between","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","constructFactory","construct","addResult","onsuccessfulcheck","accountForPotentialSkip","fields","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","sliceChunks","chunkIndex","go","restore","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","extensions","combineExtensions","search","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","decode","$1","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","ordered","spread","compiler","postprocess","atCarriageReturn","endPosition","TextDecoder","lastIndex","ceil","preprocess","combined","remarkParse","doc","env","globalThis","deserialize","serialized","$","out","unpair","Date","flags","RegExp","BigInt","Uint8Array","DataView","deserializer","EMPTY","asString","shouldSkip","TYPE","serialize","json","lossy","strict","pair","valueOf","toJSON","toISOString","serializer","structuredClone","any","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","convert","castFactory","tests","apply","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","testFunction","looksLikeANode","CONTINUE","EXIT","visitParents","visitor","factory","parents","visit","subresult","grandparents","toResult","nodeAsParent","testOrVisitor","visitorOrReverse","maybeReverse","revert","subtype","suffix","contents","listItemLoose","trimLines","last","trimLine","blockquote","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","table","firstRow","tableContent","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","hName","hChildren","hProperties","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","toHast","footnoteById","handlers","handle","passThrough","shallow","unknownHandler","createState","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","run","bail","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","middlewareIndex","callback","middleware","wrapped","fnExpectsCallback","done","then","middelware","minpath","basename","extname","assertPath","seenNonSlash","firstNonSlashEnd","extnameIndex","dirname","unmatchedSlash","startPart","startDot","preDotState","segments","joined","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","sep","JSON","stringify","minproc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","setPrototypeOf","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","parse","realFile","vfile","assertParser","process","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","currentPrimary","unified","asyncName","looksLikeAVFile","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","processor","createProcessor","createFile","post","rehypePlugins","remarkPlugins","remarkRehypeOptions","allowedElements","allowElement","disallowedElements","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","deprecation","colon","questionMark","numberSign","ccount","findAndReplace","ignored","pairs","tupleOrList","tuple","toExpression","toFunction","toPairs","pairIndex","grandparent","change","matchObject","input","global","inConstruct","notInConstruct","enterLiteralAutolink","enterLiteralAutolinkValue","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","exitLiteralAutolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findUrl","findEmail","domain","parts","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","atext","email","enterFootnoteCallString","enterFootnoteCall","enterFootnoteDefinitionLabelString","enterFootnoteDefinition","exitFootnoteCallString","exitFootnoteCall","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","tracker","createTracker","move","subexit","safe","associationId","gfmFootnoteToMarkdown","firstLineBlank","indentLines","containerFlow","mapAll","mapExceptFirst","unsafe","blank","peek","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","containerPhrasing","defaultStringLength","toAlignment","patternInScope","listInScope","none","_1","longestStreak","substring","checkQuote","quote","encodeCharacterReference","encodeInfo","outside","outsideKind","insideKind","checkEmphasis","betweenHead","betweenTail","attentionEncodeSurroundingInfo","formatHeadingAsSetext","literalWithBreak","setext","compilePattern","formatLinkAsAutolink","resourceLink","checkBullet","bullet","checkRule","rule","phrasing","checkStrong","fence","checkFence","fences","formatCodeAsIndented","repeat","encode","rank","closeAtx","bulletCurrent","bulletOrdered","checkBulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","listItemIndent","checkListItemIndent","incrementListMarker","some","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","enterTable","_align","inTable","exitTable","enterRow","enterCell","exitCodeText","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","handleTableCell","row","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","columnIndex","delimiterStart","delimiterEnd","markdownTable","exitCheck","exitParagraphWithTaskListItem","firstParaghraph","sibling","listItemWithTaskListItem","checkable","checkbox","wwwPrefix","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","sizeClose","pathInside","pathAtPunctuation","trailCharacterReferenceStart","trailBracketAfter","trailCharacterReferenceInside","emailDomainDotTrail","wwwAutolink","previousWww","previousUnbalanced","wwwAfter","protocolAutolink","previousProtocol","protocolPrefixInside","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","_gfmAutolinkLiteralWalkedInto","indent","tokenizePotentialGfmFootnoteCall","gfmFootnotes","resolveToPotentialGfmFootnoteCall","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","labelAtMarker","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","strikethrough","EditMap","editMap","at","addImplementation","sort","a","b","vecs","element","gfmTableAlign","inDelimiterRow","alignIndex","tokenizeTable","sizeB","bodyRowStart","headRowBefore","headRowBreak","headRowStart","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","tasklistCheck","spaceThenNonSpace","gfm","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteCallString","gfmFootnoteCall","gfmFootnoteDefinitionLabelString","gfmFootnoteDefinition","tableData","tableHeader","taskListCheckValueChecked","taskListCheckValueUnchecked","gfmToMarkdown","_ref","location","pageContext","slug","postEdge","edge","setContent","useState","headings","setHeadings","isSidebarOpen","setIsSidebarOpen","showScrollTop","setShowScrollTop","scrollBtnBottom","setScrollBtnBottom","scrollBtnRight","setScrollBtnRight","activeHeadingId","setActiveHeadingId","headingRefs","useRef","sidebarRef","contentRef","useEffect","fetch","res","extractHeadings","catch","console","markdown","parsedHeadings","_toConsumableArray","matchAll","React","handleClickOutside","contains","addEventListener","removeEventListener","updateScrollUI","window","scrollY","querySelector","rect","getBoundingClientRect","overlap","innerHeight","top","container","cRect","rightGap","innerWidth","headerEl","fixedTop","currentId","_headingRefs$current$2","h","el","getElementById","Layout","Seo","description","excerpt","cover","ref","_headingRefs$current$","fixedTopHeight","extraGap","targetTop","scrollTop","scrollTo","behavior","scrollToHeading","ReactMarkdown","h2","_ref2","scrollToTop","bottom","CUSTOM_PROPERTY_REGEX","HYPHEN_REGEX","NO_HYPHEN_REGEX","VENDOR_PREFIX_REGEX","MS_VENDOR_PREFIX_REGEX","capitalize","trimHyphen","skipCamelCase"],"sourceRoot":""}